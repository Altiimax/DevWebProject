# Generated by Django 3.0.3 on 2020-03-08 15:29

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id_countrycode', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('countryname', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'countries',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Persons',
            fields=[
                ('id_person', models.AutoField(primary_key=True, serialize=False)),
                ('lastname', models.CharField(max_length=50)),
                ('firstname', models.CharField(max_length=30)),
                ('alias', models.CharField(blank=True, max_length=20, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('email', models.CharField(blank=True, max_length=80, null=True)),
            ],
            options={
                'db_table': 'persons',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tools',
            fields=[
                ('id_tool', models.AutoField(primary_key=True, serialize=False)),
                ('toolname', models.CharField(blank=True, max_length=30, null=True)),
                ('tooldescription', models.TextField(blank=True, null=True)),
                ('toolprice', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('toolimages', models.TextField(blank=True, null=True)),
                ('id_person', models.ForeignKey(db_column='id_person', on_delete=django.db.models.deletion.DO_NOTHING, to='toolbox_app.Persons')),
            ],
            options={
                'db_table': 'tools',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Towns',
            fields=[
                ('id_town', models.AutoField(primary_key=True, serialize=False)),
                ('postcode', models.IntegerField()),
                ('townname', models.CharField(max_length=30)),
                ('id_countrycode', models.ForeignKey(db_column='id_countrycode', on_delete=django.db.models.deletion.DO_NOTHING, to='toolbox_app.Countries')),
            ],
            options={
                'db_table': 'towns',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Toolreviews',
            fields=[
                ('id_toolreview', models.AutoField(primary_key=True, serialize=False)),
                ('stars', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('id_tool', models.ForeignKey(db_column='id_tool', on_delete=django.db.models.deletion.DO_NOTHING, to='toolbox_app.Tools')),
            ],
            options={
                'db_table': 'toolreviews',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Personstowns',
            fields=[
                ('id_personstowns', models.AutoField(primary_key=True, serialize=False)),
                ('id_person', models.ForeignKey(db_column='id_person', on_delete=django.db.models.deletion.DO_NOTHING, to='toolbox_app.Persons')),
                ('id_town', models.ForeignKey(db_column='id_town', on_delete=django.db.models.deletion.DO_NOTHING, to='toolbox_app.Towns')),
            ],
            options={
                'db_table': 'personstowns',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Personreviews',
            fields=[
                ('id_personreview', models.AutoField(primary_key=True, serialize=False)),
                ('stars', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('id_person', models.ForeignKey(db_column='id_person', on_delete=django.db.models.deletion.DO_NOTHING, to='toolbox_app.Persons')),
            ],
            options={
                'db_table': 'personreviews',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id_groupname', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('grouptype', models.CharField(blank=True, max_length=7, null=True)),
                ('grouprange', models.IntegerField()),
                ('id_town', models.ForeignKey(db_column='id_town', on_delete=django.db.models.deletion.DO_NOTHING, to='toolbox_app.Towns')),
            ],
            options={
                'db_table': 'groups',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Toolsgroups',
            fields=[
                ('id_tool', models.OneToOneField(db_column='id_tool', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='toolbox_app.Tools')),
                ('id_groupname', models.ForeignKey(db_column='id_groupname', on_delete=django.db.models.deletion.DO_NOTHING, to='toolbox_app.Groups')),
            ],
            options={
                'db_table': 'toolsgroups',
                'managed': True,
                'unique_together': {('id_tool', 'id_groupname')},
            },
        ),
        migrations.CreateModel(
            name='Groupsmembers',
            fields=[
                ('id_person', models.OneToOneField(db_column='id_person', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='toolbox_app.Persons')),
                ('groupadmin', models.BooleanField()),
                ('id_groupname', models.ForeignKey(db_column='id_groupname', on_delete=django.db.models.deletion.DO_NOTHING, to='toolbox_app.Groups')),
            ],
            options={
                'db_table': 'groupsmembers',
                'managed': True,
                'unique_together': {('id_person', 'id_groupname')},
            },
        ),
    ]
